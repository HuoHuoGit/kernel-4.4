From 022fa83256707a3ab9ee91480abf0a8fdf061716 Mon Sep 17 00:00:00 2001
From: Duan Honghui <duanhh0103@thundersoft.com>
Date: Mon, 19 Oct 2020 10:19:41 +0800
Subject: [PATCH] PD charge for bq25980 and bq25790

Change-Id: If6c641b7f32037e2acd3214bcd232cca7a362692
---
 arch/arm64/configs/vendor/kona_defconfig  |   2 +
 drivers/power/supply/Kconfig              |   1 +
 drivers/power/supply/Makefile             |   1 +
 drivers/power/supply/power_supply_sysfs.c |   6 +-
 drivers/usb/pd/policy_engine.c            | 139 +++++++++++++++++++++++++++++-
 include/linux/power_supply.h              |   5 ++
 include/linux/usb/usbpd.h                 |  14 +++
 7 files changed, 164 insertions(+), 4 deletions(-)
 mode change 100644 => 100755 drivers/power/supply/power_supply_sysfs.c
 mode change 100644 => 100755 include/linux/power_supply.h
 mode change 100644 => 100755 include/linux/usb/usbpd.h

diff --git a/arch/arm64/configs/vendor/kona_defconfig b/arch/arm64/configs/vendor/kona_defconfig
index 761ae20..bbffbbe 100644
--- a/arch/arm64/configs/vendor/kona_defconfig
+++ b/arch/arm64/configs/vendor/kona_defconfig
@@ -785,3 +785,5 @@ CONFIG_CORESIGHT_HWEVENT=y
 CONFIG_CORESIGHT_DUMMY=y
 CONFIG_CORESIGHT_REMOTE_ETM=y
 CONFIG_CORESIGHT_TGU=y
+CONFIG_CHARGER_BQ25790=y
+CONFIG_CHARGER_BQ25980=y
diff --git a/drivers/power/supply/Kconfig b/drivers/power/supply/Kconfig
index 6c803ea..ac862a1 100644
--- a/drivers/power/supply/Kconfig
+++ b/drivers/power/supply/Kconfig
@@ -646,5 +646,6 @@ config CHARGER_CROS_USBPD
 	  that into power_supply properties.
 
 source "drivers/power/supply/qcom/Kconfig"
+source "drivers/power/supply/ti/Kconfig"
 
 endif # POWER_SUPPLY
diff --git a/drivers/power/supply/Makefile b/drivers/power/supply/Makefile
index 31305eb..3a43d63 100644
--- a/drivers/power/supply/Makefile
+++ b/drivers/power/supply/Makefile
@@ -86,3 +86,4 @@ obj-$(CONFIG_AXP288_FUEL_GAUGE) += axp288_fuel_gauge.o
 obj-$(CONFIG_AXP288_CHARGER)	+= axp288_charger.o
 obj-$(CONFIG_CHARGER_CROS_USBPD)	+= cros_usbpd-charger.o
 obj-$(CONFIG_ARCH_QCOM)		+= qcom/
+obj-y				+= ti/
diff --git a/drivers/power/supply/power_supply_sysfs.c b/drivers/power/supply/power_supply_sysfs.c
old mode 100644
new mode 100755
index b9e064a..461486b
--- a/drivers/power/supply/power_supply_sysfs.c
+++ b/drivers/power/supply/power_supply_sysfs.c
@@ -59,13 +59,14 @@ static const char * const power_supply_status_text[] = {
 };
 
 static const char * const power_supply_charge_type_text[] = {
-	"Unknown", "N/A", "Trickle", "Fast", "Taper"
+	"Unknown", "N/A", "Trickle", "Fast", "Taper", "Standard"
 };
 
 static const char * const power_supply_health_text[] = {
 	"Unknown", "Good", "Overheat", "Dead", "Over voltage",
 	"Unspecified failure", "Cold", "Watchdog timer expire",
 	"Safety timer expire",
+	"Over current",
 	"Warm", "Cool", "Hot"
 };
 
@@ -318,6 +319,9 @@ static struct device_attribute power_supply_attrs[] = {
 	POWER_SUPPLY_ATTR(charge_control_limit),
 	POWER_SUPPLY_ATTR(charge_control_limit_max),
 	POWER_SUPPLY_ATTR(input_current_limit),
+	POWER_SUPPLY_ATTR(input_voltage_limit),
+	POWER_SUPPLY_ATTR(ti_adc),
+	POWER_SUPPLY_ATTR(ti_bypass),
 	POWER_SUPPLY_ATTR(energy_full_design),
 	POWER_SUPPLY_ATTR(energy_empty_design),
 	POWER_SUPPLY_ATTR(energy_full),
diff --git a/drivers/usb/pd/policy_engine.c b/drivers/usb/pd/policy_engine.c
index a86bac4..2461cc2 100644
--- a/drivers/usb/pd/policy_engine.c
+++ b/drivers/usb/pd/policy_engine.c
@@ -4177,7 +4177,7 @@ static ssize_t pdo_n_show(struct device *dev, struct device_attribute *attr,
 	usbpd_err(&pd->dev, "Invalid PDO index\n");
 	return -EINVAL;
 }
-
+#if 0
 static ssize_t select_pdo_store(struct device *dev,
 		struct device_attribute *attr, const char *buf, size_t size)
 {
@@ -4243,7 +4243,7 @@ static ssize_t select_pdo_store(struct device *dev,
 	mutex_unlock(&pd->swap_lock);
 	return ret ? ret : size;
 }
-
+#endif
 static ssize_t select_pdo_show(struct device *dev,
 		struct device_attribute *attr, char *buf)
 {
@@ -4251,7 +4251,119 @@ static ssize_t select_pdo_show(struct device *dev,
 
 	return scnprintf(buf, PAGE_SIZE, "%d\n", pd->selected_pdo);
 }
-static DEVICE_ATTR_RW(select_pdo);
+static DEVICE_ATTR_RO(select_pdo);
+
+static struct usbpd *g_pd;
+
+struct usbpd *usbpd_get_g_pd(void)
+{
+	return g_pd;
+}
+EXPORT_SYMBOL(usbpd_get_pps_status);
+
+int usbpd_fetch_pdo(struct usbpd *pd, struct usbpd_pdo *pdos)
+{
+	int ret = 0;
+	int pdo;
+	int i;
+
+	if (!pd || !pdos)
+		return -EINVAL;
+
+	mutex_lock(&pd->swap_lock);
+
+	if (pd->current_pr == PR_SRC) {
+		usbpd_err(&pd->dev, "not support in SRC mode\n");
+		ret = -ENOTSUPP;
+		goto out;
+	}
+
+	for (i = 0; i < 7; i++) {
+		pdo = pd->received_pdos[i];
+		if (pdo == 0)
+			break;
+
+		pdos[i].pos = i + 1;
+		pdos[i].pps = PD_APDO_PPS(pdo) == 0;
+		pdos[i].type = PD_SRC_PDO_TYPE(pdo);
+
+		if (pdos[i].type == PD_SRC_PDO_TYPE_FIXED) {
+			pdos[i].curr_ma = PD_SRC_PDO_FIXED_MAX_CURR(pdo) * 10;
+			pdos[i].max_volt_mv = PD_SRC_PDO_FIXED_VOLTAGE(pdo) * 50;
+			pdos[i].min_volt_mv = PD_SRC_PDO_FIXED_VOLTAGE(pdo) * 50;
+			usbpd_info(&pd->dev, "pdo:%d, Fixed supply volt: %d(mv) max curr:%d",
+					i+1, pdos[i].max_volt_mv,
+					pdos[i].curr_ma);
+		} else if (pdos[i].type == PD_SRC_PDO_TYPE_AUGMENTED) {
+			pdos[i].max_volt_mv = PD_APDO_MAX_VOLT(pdo) * 100;
+			pdos[i].min_volt_mv = PD_APDO_MIN_VOLT(pdo) * 100;
+			pdos[i].curr_ma     = PD_APDO_MAX_CURR(pdo) * 50;
+			usbpd_info(&pd->dev, "pdo:%d, PPS volt: %d(mv) max curr:%d",
+					i+1, pdos[i].max_volt_mv,
+					pdos[i].curr_ma);
+		} else {
+			usbpd_err(&pd->dev, "only fixed and pps pdo supported\n");
+		}
+	}
+
+out:
+	mutex_unlock(&pd->swap_lock);
+	return ret;
+}
+EXPORT_SYMBOL(usbpd_fetch_pdo);
+
+int usbpd_select_pdo(struct usbpd *pd, int pdo, int uv, int ua)
+{
+	int ret;
+
+	mutex_lock(&pd->swap_lock);
+
+	if (pd->current_pr != PR_SINK) {
+		ret = -ENOTSUPP;
+		goto out;
+	}
+
+	if (pdo < 1 || pdo > 7) {
+		usbpd_err(&pd->dev, "select_pdo: invalid PDO:%d\n", pdo);
+		ret = -EINVAL;
+		goto out;
+	}
+
+	ret = pd_select_pdo(pd, pdo, uv, ua);
+	if (ret)
+		goto out;
+
+	reinit_completion(&pd->is_ready);
+	pd->send_request = true;
+	if (!pd->sm_queued && !work_busy(&pd->sm_work))
+		kick_sm(pd, 0);
+	else {
+		usbpd_dbg(&pd->dev, "usbpd_select_pdo: pd->sm_queued is set\n");
+		ret = -EBUSY;
+		goto out;
+	}
+
+	/* wait for operation to complete */
+	if (!wait_for_completion_timeout(&pd->is_ready,
+			msecs_to_jiffies(1000))) {
+		usbpd_err(&pd->dev, "select_pdo: request timed out\n");
+		ret = -ETIMEDOUT;
+		goto out;
+	}
+
+	/* determine if request was accepted/rejected */
+	if (pd->selected_pdo != pd->requested_pdo ||
+			pd->current_voltage != pd->requested_voltage) {
+		usbpd_err(&pd->dev, "select_pdo: request rejected\n");
+		ret = -EINVAL;
+	}
+
+out:
+	pd->send_request = false;
+	mutex_unlock(&pd->swap_lock);
+	return ret;
+}
+EXPORT_SYMBOL(usbpd_select_pdo);
 
 static ssize_t rdo_show(struct device *dev, struct device_attribute *attr,
 		char *buf)
@@ -4364,6 +4476,25 @@ static int trigger_tx_msg(struct usbpd *pd, bool *msg_tx_flag)
 
 }
 
+
+int usbpd_get_pps_status(struct usbpd *pd, u32 *pps_status)
+{
+#if 1
+	int ret = 0;
+
+	if (pd->spec_rev == USBPD_REV_20)
+		return -EINVAL;
+
+	ret = trigger_tx_msg(pd, &pd->send_get_pps_status);
+	if (ret)
+		return ret;
+
+	*pps_status = pd->pps_status_db;
+#endif
+	return 0;
+}
+EXPORT_SYMBOL(usbpd_get_g_pd);
+
 static ssize_t get_src_cap_ext_show(struct device *dev,
 		struct device_attribute *attr, char *buf)
 {
@@ -4779,6 +4910,8 @@ struct usbpd *usbpd_create(struct device *parent)
 	ret = power_supply_reg_notifier(&pd->psy_nb);
 	if (ret)
 		goto del_inst;
+	
+	g_pd = pd;
 
 	/* force read initial power_supply values */
 	psy_changed(&pd->psy_nb, PSY_EVENT_PROP_CHANGED, pd->usb_psy);
diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
old mode 100644
new mode 100755
index df38e9a..8426be0
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -47,6 +47,7 @@ enum {
 	POWER_SUPPLY_CHARGE_TYPE_TRICKLE,
 	POWER_SUPPLY_CHARGE_TYPE_FAST,
 	POWER_SUPPLY_CHARGE_TYPE_TAPER,
+	POWER_SUPPLY_CHARGE_TYPE_STANDARD,	/* normal speed */
 };
 
 enum {
@@ -59,6 +60,7 @@ enum {
 	POWER_SUPPLY_HEALTH_COLD,
 	POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE,
 	POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE,
+	POWER_SUPPLY_HEALTH_OVERCURRENT,
 	POWER_SUPPLY_HEALTH_WARM,
 	POWER_SUPPLY_HEALTH_COOL,
 	POWER_SUPPLY_HEALTH_HOT,
@@ -198,6 +200,9 @@ enum power_supply_property {
 	POWER_SUPPLY_PROP_CHARGE_CONTROL_LIMIT,
 	POWER_SUPPLY_PROP_CHARGE_CONTROL_LIMIT_MAX,
 	POWER_SUPPLY_PROP_INPUT_CURRENT_LIMIT,
+	POWER_SUPPLY_PROP_INPUT_VOLTAGE_LIMIT,
+	POWER_SUPPLY_PROP_TI_ADC,
+	POWER_SUPPLY_PROP_TI_BYPASS,
 	POWER_SUPPLY_PROP_ENERGY_FULL_DESIGN,
 	POWER_SUPPLY_PROP_ENERGY_EMPTY_DESIGN,
 	POWER_SUPPLY_PROP_ENERGY_FULL,
diff --git a/include/linux/usb/usbpd.h b/include/linux/usb/usbpd.h
old mode 100644
new mode 100755
index 87dff93f..0b6af0a
--- a/include/linux/usb/usbpd.h
+++ b/include/linux/usb/usbpd.h
@@ -159,4 +159,18 @@ static inline int usbpd_exit_mode(struct usbpd *pd, u16 svid, int mode,
 			SVDM_CMD_TYPE_INITIATOR, mode, vdo, vdo ? 1 : 0);
 }
 
+struct usbpd_pdo {
+	bool pps;
+	int type;
+	int max_volt_mv;
+	int min_volt_mv;
+	int curr_ma;
+	int pos;
+};
+
+struct usbpd *usbpd_get_g_pd(void);
+int usbpd_get_pps_status(struct usbpd *pd, u32 *status);
+int usbpd_fetch_pdo(struct usbpd *pd, struct usbpd_pdo *pdos);
+int usbpd_select_pdo(struct usbpd *pd, int pdo, int uv, int ua);
+
 #endif /* __LINUX_USB_USBPD_H */
-- 
2.7.4

